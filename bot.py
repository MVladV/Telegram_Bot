import schedule
import telebot
import config
import foodlist as fl
import json
from time import sleep
from telebot import types
from threading import Thread
from user import User

name = "User"
sex = "pass"
age = 1
weight = 1
growth = 1
goals = "pass"
time01 = "pass"
id_chat = 1

bot = telebot.TeleBot(config.TOKEN)
@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('static/welcome.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)
 
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìí –ë–ª–æ–∫–Ω–æ—Ç")
    item2 = types.KeyboardButton("üèÜ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
    item3 = types.KeyboardButton("üçè –•–∞—Ä—á—É–≤–∞–Ω–Ω—è")
    item4 = types.KeyboardButton("üí§ –°–æ–Ω")
 
    markup.add(item1, item2, item3, item4)
 
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è.".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
    
    #check if user exists
    try:
        with open("userList.json", "r") as read_file:
            try:
                data = json.load(read_file)
            except Exception as e:
                data=[]
        read_file.close()
        exists=False
        if len(data)!=0:
            for user in data:
                if user['id']==message.chat.id:
                    exists=True
        if not exists:
            d = {"id":message.chat.id,"index":{"fmbt":0,"fmlh":0,"fmdr":0,"fwbt":0,"fwlh":0,"fwdr":0,"muscle":0,"waste":0},"menu":"MAIN"}
            data.append(d)
            with open("userList.json", "w") as write_file:
                json.dump(data, write_file)
            write_file.close()

    except Exception as e:
        print(repr(e))
    changeMenu("MAIN",message.chat.id)

@bot.message_handler(content_types=['text'])
def lalala(message):
    global name 
    name = message.from_user.first_name

    if message.chat.type == 'private':
        if message.text == 'üìí –ë–ª–æ–∫–Ω–æ—Ç':
            with open("parameters.json", "r") as read_f:
                try:
                    data = json.load(read_f)
                except Exception as e:
                    data = []
            read_f.close()
            exists=False
            if len(data)!=0:
                for user in data:
                    if user['Name'] == name:
                        exists=True
            if not exists:

                bot.send_message(message.chat.id, "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:")

                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", callback_data='sex1')
                item2 = types.InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", callback_data='sex2') 
                markup.add(item1, item2)
     
                bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å.', reply_markup=markup) 

                markup1 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("14-16", callback_data='age1')
                item2 = types.InlineKeyboardButton("16-18", callback_data='age2') 
                item3 = types.InlineKeyboardButton("18-24", callback_data='age3') 
                item4 = types.InlineKeyboardButton("24-30", callback_data='age4') 
                markup1.add(item1, item2, item3, item4)
     
                bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –í–∞—à –≤—ñ–∫', reply_markup=markup1) 

                markup2 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–¥–æ 160 —Å–º", callback_data='gr1')
                item2 = types.InlineKeyboardButton("–¥–æ 170 —Å–º", callback_data='gr2')
                item3 = types.InlineKeyboardButton("–¥–æ 180 —Å–º", callback_data='gr3')
                item4 = types.InlineKeyboardButton("–¥–æ 190 —Å–º", callback_data='gr4')
     
                markup2.add(item1, item2, item3, item4)
     
                bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—Å –∑—Ä—ñ—Å—Ç.', reply_markup=markup2) 

                markup3 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–¥–æ 45 –∫–≥", callback_data='w1')
                item2 = types.InlineKeyboardButton("–¥–æ 55 –∫–≥", callback_data='w2')
                item3 = types.InlineKeyboardButton("–¥–æ 65 –∫–≥", callback_data='w3')
                item4 = types.InlineKeyboardButton("–¥–æ 80 –∫–≥", callback_data='w4')
     
                markup3.add(item1, item2, item3, item4)
     
                bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É.', reply_markup=markup3) 

                markup4 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–°—Ö—É–¥–Ω—É—Ç–∏", callback_data='g1')
                item2 = types.InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É", callback_data='g2')
     
                markup4.add(item1, item2)
     
                bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.', reply_markup=markup4)

            else:
                u1 = User(name, "None", weight, age, growth, goals)
                bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ.')
                bot.send_message(message.chat.id, str(u1))
    
        elif message.text == 'üçè –•–∞—Ä—á—É–≤–∞–Ω–Ω—è':
            changeMenu("FOOD",message.chat.id)
            bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ –ø–ª–∞–Ω–æ–º —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.')
            sleep(1)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üèÉ –î–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è") 
            item2 = types.KeyboardButton("üèãÔ∏è –î–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏")
            back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
            markup.add(item1, item2, back)
     
            bot.send_message(message.chat.id, '–û–±–µ—Ä–∏, –¥–ª—è —á–æ–≥–æ —Å–∞–º–µ –º–µ–Ω—é —Ç–æ–±—ñ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏?', reply_markup=markup) 
        elif message.text == 'üèÉ –î–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è':
            changeMenu("FOOD_WASTE",message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("ü•ö–°–Ω—ñ–¥–∞–Ω–æ–∫") 
            item2 = types.KeyboardButton("üç≤–û–±—ñ–¥")
            item3 = types.KeyboardButton("üçó–í–µ—á–µ—Ä—è")
            back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
            markup.add(item1, item2, item3, back)
     
            bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ –±–∞–∂–∞–Ω–µ –º–µ–Ω—é', reply_markup=markup) 
        elif message.text == 'üèãÔ∏è –î–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏':
            changeMenu("FOOD_MASS",message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("ü•ö–°–Ω—ñ–¥–∞–Ω–æ–∫") 
            item2 = types.KeyboardButton("üç≤–û–±—ñ–¥")
            item3 = types.KeyboardButton("üçó–í–µ—á–µ—Ä—è")
            back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
            markup.add(item1, item2, item3, back)
     
            bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ –±–∞–∂–∞–Ω–µ –º–µ–Ω—é', reply_markup=markup) 
        elif message.text == 'ü•ö–°–Ω—ñ–¥–∞–Ω–æ–∫':
            markup = types.InlineKeyboardMarkup(row_width=2)
            if currentMenu(message.chat.id)=="FOOD_WASTE": 
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwbt_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwbt_next')  
                img = open("images/breakfest.jpg", 'rb')
                caption = "–°–Ω—ñ–¥–∞–Ω–æ–∫"
                text = fl.getText("fwbt",0)
            elif currentMenu(message.chat.id)=="FOOD_MASS":   
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmbt_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmbt_next')
                img = open("images/breakfest.jpg", 'rb')
                caption = "–°–Ω—ñ–¥–∞–Ω–æ–∫"
                text = fl.getText("fmbt",0)
            markup.add(item1, item2)
            bot.send_photo(message.chat.id, img, caption=caption)
            bot.send_message(message.chat.id, text, reply_markup=markup) 
        elif message.text == 'üç≤–û–±—ñ–¥':
            markup = types.InlineKeyboardMarkup(row_width=2)
            if currentMenu(message.chat.id)=="FOOD_WASTE":   
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwlh_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwlh_next')
                img = open("images/lunch.jpg", 'rb')
                caption = "–û–±—ñ–¥"
                text = fl.getText("fwlh",0)
            elif currentMenu(message.chat.id)=="FOOD_MASS":  
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmlh_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmlh_next') 
                img = open("images/lunch.jpg", 'rb')
                caption = "–û–±—ñ–¥"
                text = fl.getText("fmlh",0)
            markup.add(item1, item2)
            bot.send_photo(message.chat.id, img, caption=caption)
            bot.send_message(message.chat.id, text, reply_markup=markup) 
        elif message.text == 'üçó–í–µ—á–µ—Ä—è':
            markup = types.InlineKeyboardMarkup(row_width=2)
            if currentMenu(message.chat.id)=="FOOD_WASTE": 
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwdr_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwdr_next')  
                img = open("images/dinner.jpg", 'rb')
                caption = "–í–µ—á–µ—Ä—è"
                text = fl.getText("fwdr",0)
            elif currentMenu(message.chat.id)=="FOOD_MASS":  
                item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmdr_back')
                item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmdr_next')   
                img = open("images/dinner.jpg", 'rb')
                caption = "–í–µ—á–µ—Ä—è"
                text = fl.getText("fmdr",0)
            markup.add(item1, item2)
            bot.send_photo(message.chat.id, img, caption=caption)
            bot.send_message(message.chat.id, text, reply_markup=markup) 
        elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            current = currentMenu(message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if current == "FOOD" or current == "TRAINING":
                changeMenu("MAIN",message.chat.id)
                item1 = types.KeyboardButton("üìí –ë–ª–æ–∫–Ω–æ—Ç")
                item2 = types.KeyboardButton("üèÜ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
                item3 = types.KeyboardButton("üçè –•–∞—Ä—á—É–≤–∞–Ω–Ω—è")
                item4 = types.KeyboardButton("üí§ –°–æ–Ω")
                markup.add(item1, item2, item3, item4)
            elif current == "FOOD_WASTE" or current == "FOOD_MASS":
                changeMenu("FOOD",message.chat.id)
                item1 = types.KeyboardButton("üèÉ –î–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è") 
                item2 = types.KeyboardButton("üèãÔ∏è –î–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏")
                back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
                markup.add(item1, item2, back)
            bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥", reply_markup=markup)
        elif message.text == 'üí§ –°–æ–Ω':
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("4:00 - 6:00", callback_data='time1')
            item2 = types.InlineKeyboardButton("6:00 - 8:00", callback_data='time2')
            item3 = types.InlineKeyboardButton("8:00 - 10:00", callback_data='time3')
            item4 = types.InlineKeyboardButton("–í–∏–º–∫–Ω—É—Ç–∏ —Ä–∞–Ω–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data='time4')
  
            markup.add(item1, item2, item3, item4)
 
            bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å —á–∞—Å –∫–æ–ª–∏ –≤–∞–º —Ç—Ä–µ–±–∞ –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å.', reply_markup=markup)            
        elif message.text == 'üèÜ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è':
            changeMenu("TRAINING",message.chat.id)
            bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ —Ä–µ–∂–∏–º–æ–º —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.')
            sleep(1)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üí™ –ù–∞–±—Ä–∞—Ç–∏ –º'—è–∑–æ–≤—É –º–∞—Å—É") 
            item2 = types.KeyboardButton("üèÉ –°—Ö—É–¥–Ω—É—Ç–∏")
            item3 = types.KeyboardButton("üìã –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å—Ö–µ–º–∏")
            back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
            markup.add(item1, item2, item3, back)
     
            bot.send_message(message.chat.id, '–û–±–µ—Ä–∏, —â–æ —Å–∞–º–µ —Ç–∏ –±–∞–∂–∞—î—à –æ—Ç—Ä–∏–º–∞—Ç–∏?', reply_markup=markup) 
        elif message.text == "üí™ –ù–∞–±—Ä–∞—Ç–∏ –º'—è–∑–æ–≤—É –º–∞—Å—É":
            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='muscle_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='muscle_next')  
            img = open("images/muscle.jpg", 'rb')
            caption = "–í–ø—Ä–∞–≤–∏ –¥–ª—è –Ω–∞–±—Ä–∞–Ω–Ω—è –º–∞—Å–∏"
            text = fl.getText("muscle",0)
            markup.add(item1, item2)
            bot.send_photo(message.chat.id, img, caption=caption)
            bot.send_message(message.chat.id, text, reply_markup=markup) 
        elif message.text == "üèÉ –°—Ö—É–¥–Ω—É—Ç–∏":
            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='waste_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='waste_next')  
            img = open("images/waste.jpg", 'rb')
            caption = "–í–ø—Ä–∞–≤–∏ –¥–ª—è —Å—Ö—É–¥–µ–Ω–Ω—è"
            text = fl.getText("waste",0)
            markup.add(item1, item2)
            bot.send_photo(message.chat.id, img, caption=caption)
            bot.send_message(message.chat.id, text, reply_markup=markup) 
        elif message.text == "üìã –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Å—Ö–µ–º–∏":
            bot.send_message(message.chat.id, fl.getText("schema",0),parse_mode='html')
            sleep(1)
            bot.send_message(message.chat.id, fl.getText("schedule",0),parse_mode='html')
        else:
            print(message.text)
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ üò¢')

@bot.callback_query_handler(func=lambda c: c.data == 'time1')
def callback_inline(call):
    try:
            
        global id_chat 
        id_chat = call.message.chat.id
        bot.send_message(call.message.chat.id, '–í–∞–º —Å–ª—ñ–¥ –ª—è–≥—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –æ 21:00, —è –Ω–∞–ø–∏—à—É –≤–∞–º –æ 5 —Ä–∞–Ω–∫—É')
        global time01
        time01 = "05:00:00"
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ –°–æ–Ω",
            reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–°–æ–Ω")
        alarm()

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'time2')
def callback_inline(call):
    try:

        global id_chat 
        id_chat = call.message.chat.id
        bot.send_message(call.message.chat.id, '–í–∞–º —Å–ª—ñ–¥ –ª—è–≥—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –æ 23:00, —è –Ω–∞–ø–∏—à—É –≤–∞–º –æ 7 —Ä–∞–Ω–∫—É')
        global time01
        time01 = "07:00:00"
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ –°–æ–Ω",
            reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–°–æ–Ω")
        alarm()

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'time3')
def callback_inline(call):
    try:

        global id_chat 
        id_chat = call.message.chat.id
        bot.send_message(call.message.chat.id, '–í–∞–º —Å–ª—ñ–¥ –ª—è–≥—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –æ –ø—ñ–≤–Ω–æ—á—ñ, —è –Ω–∞–ø–∏—à—É –≤–∞–º –æ 9 —Ä–∞–Ω–∫—É')
        global time01
        time01 = "09:00:00"
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ –°–æ–Ω",
            reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–°–æ–Ω")
        alarm()

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'time4')
def callback_inline(call):
    try:

        global id_chat 
        id_chat = call.message.chat.id
        bot.send_message(call.message.chat.id, '–†–∞–Ω–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ')
        global time01
        time01 = ""
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ –°–æ–Ω",
            reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–°–æ–Ω")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'sex1')
def callback_inline(call):
    global sex
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        sex = "–ß–æ–ª–æ–≤—ñ–∫"    
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'sex2')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global sex
        sex = "–ñ—ñ–Ω–∫–∞"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)
        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'age1')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global age
        age = 15
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'age2')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global age
        age = 17
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'age3')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global age
        age = 20
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'age4')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global age
        age = 27
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'w1')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global weight
        weight = 45
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'w2')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global weight
        weight = 55
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'w3')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global weight
        weight = 65
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'w4')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global weight
        weight = 80
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'gr1')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global growth
        growth = 160
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'gr2')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global growth
        growth = 170
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'gr3')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global growth
        growth = 180
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'gr4')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global growth
        growth = 190
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda c: c.data == 'g1')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global goals
        goals = "–°—Ö—É–¥–Ω—É—Ç–∏"
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

    u1 = User(name, sex, weight, age, growth, goals)
    u1.add_user()
    bot.send_message(call.message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ')
    bot.send_message(call.message.chat.id, str(u1))


@bot.callback_query_handler(func=lambda c: c.data == 'g2')
def callback_inline(call):
    try:
        bot.send_message(call.message.chat.id, '–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ')
        global growth
        goals = "–ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É"
        # remove inline buttons
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìí –ë–ª–æ–∫–Ω–æ—Ç", reply_markup=None)

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–ë–ª–æ–∫–Ω–æ—Ç")

    except Exception as e:
        print(repr(e))

    u1 = User(name, sex, weight, age, growth, goals)
    u1.add_user()
    bot.send_message(call.message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ')
    bot.send_message(call.message.chat.id, str(u1))

@bot.callback_query_handler(func=lambda c: c.data == 'type1')
def callback_inline(call):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–Ω—ñ–¥–∞–Ω–æ–∫") 
        item2 = types.KeyboardButton("–û–±—ñ–¥")
        item3 = types.KeyboardButton("–í–µ—á–µ—Ä—è")
        back = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item1, item2, item3, back)
        bot.send_message(call.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å',reply_markup=markup)
        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–á–∂–∞")

    except Exception as e:
        print(repr(e))

#–û–±—Ä–æ–±–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
@bot.callback_query_handler(func=lambda c: True)
def callback_inline(call):
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        #–á–∂–∞ –¥–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è
        if call.data == "fwbt_back":
            text = fl.getText("fwbt",scrollBack("fwbt",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwbt_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwbt_next')
            markup.add(item1, item2)
        elif call.data == "fwbt_next":
            text = fl.getText("fwbt",scrollNext("fwbt",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwbt_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwbt_next')
            markup.add(item1, item2)
        elif call.data == "fwlh_back":
            text = fl.getText("fwlh",scrollNext("fwlh",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwlh_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwlh_next')
            markup.add(item1, item2)
        elif call.data == "fwlh_next":
            text = fl.getText("fwlh",scrollNext("fwlh",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwlh_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwlh_next')
            markup.add(item1, item2)
        elif call.data == "fwdr_back":
            text = fl.getText("fwdr",scrollNext("fwdr",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwdr_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwdr_next')
            markup.add(item1, item2)
        elif call.data == "fwdr_next":
            text = fl.getText("fwdr",scrollNext("fwdr",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fwdr_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fwdr_next')
            markup.add(item1, item2)

        #–á–∂–∞ –¥–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏
        elif call.data == "fmbt_back":
            text = fl.getText("fmbt",scrollBack("fmbt",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmbt_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmbt_next')
            markup.add(item1, item2)
        elif call.data == "fmbt_next":
            text = fl.getText("fmbt",scrollNext("fmbt",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmbt_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmbt_next')
            markup.add(item1, item2)
        elif call.data == "fmlh_back":
            text = fl.getText("fmlh",scrollNext("fmlh",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmlh_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmlh_next')
            markup.add(item1, item2)
        elif call.data == "fmlh_next":
            text = fl.getText("fmlh",scrollNext("fmlh",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmlh_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmlh_next')
            markup.add(item1, item2)
        elif call.data == "fmdr_back":
            text = fl.getText("fmdr",scrollNext("fmdr",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmdr_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmdr_next')
            markup.add(item1, item2)
        elif call.data == "fmdr_next":
            text = fl.getText("fmdr",scrollNext("fmdr",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='fmdr_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='fmdr_next')
            markup.add(item1, item2)
        #–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–±–æ—Ä—É –º–∞—Å–∏
        elif call.data == "muscle_next":
            markup = types.InlineKeyboardMarkup(row_width=3)
            text = fl.getText("muscle",scrollNext("muscle",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='muscle_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='muscle_next')  
            markup.add(item1, item2)
        elif call.data == "muscle_back":
            markup = types.InlineKeyboardMarkup(row_width=3)
            text = fl.getText("muscle",scrollBack("muscle",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='muscle_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='muscle_next')  
            markup.add(item1, item2)
        #–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è
        elif call.data == "waste_next":
            markup = types.InlineKeyboardMarkup(row_width=3)
            text = fl.getText("waste",scrollNext("waste",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='waste_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='waste_next')  
            markup.add(item1, item2)
        elif call.data == "waste_back":
            markup = types.InlineKeyboardMarkup(row_width=3)
            text = fl.getText("waste",scrollBack("waste",call.message.chat.id))
            item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='waste_back')
            item2 = types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='waste_next')  
            markup.add(item1, item2)
        if call.message.text!=text:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
            reply_markup=markup)
        else:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            text="–Ü–Ω—à–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î")
        
    except Exception as e:
        print(repr(e))

def msg():
    bot.send_message(id_chat, "–ß–∞—Å –ø—Ä–æ–∫–∏–¥–∞—Ç–∏—Å—è‚è∞")

def r_check_mes():
    while True:
        schedule.run_pending()
        sleep(1)

#–§—É–Ω—Ü—ñ—è –ø—Ä–æ–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–ø–µ—Ä–µ–¥
def scrollNext(name,id):
    with open("userList.json", "r") as read_file:
        users = json.load(read_file)
    read_file.close()
    data = list(filter(lambda user: user['id'] == id, users))
    idx = users.index(data[0])
    i = data[0]['index'][name]
    if i<fl.getCount(name)-1:
        users[idx]['index'][name]=i+1
        with open("userList.json", "w") as write_file:
            json.dump(users, write_file)
        write_file.close()
        return i+1
    else:
        users[idx]['index'][name]=0
        with open("userList.json", "w") as write_file:
            json.dump(users, write_file)
        write_file.close()
        return 0

#–§—É–Ω—Ü—ñ—è –ø—Ä–æ–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–∑–∞–¥
def scrollBack(name,id):
    with open("userList.json", "r") as read_file:
        users = json.load(read_file)
    read_file.close()
    data = list(filter(lambda user: user['id'] == id, users))
    idx = users.index(data[0])
    i = data[0]['index'][name]
    if i-1>=0:
        users[idx]['index'][name]=i-1
        with open("userList.json", "w") as write_file:
            json.dump(users, write_file)
        write_file.close()
        return i-1
    else:
        users[idx]['index'][name]=fl.getCount(name)-1
        with open("userList.json", "w") as write_file:
            json.dump(users, write_file)
        write_file.close()
        return fl.getCount(name)-1

#–§—É–Ω—Ü—ñ—è –∑–º—ñ–Ω–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
#–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø—Ä–∞—Ü—é–≤–∞–ª–∞ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
def changeMenu(name,id):
    with open("userList.json", "r") as read_file:
        users = json.load(read_file)
    read_file.close()
    data = list(filter(lambda user: user['id'] == id, users))
    idx = users.index(data[0])
    users[idx]['menu'] = name
    with open("userList.json", "w") as write_file:
        json.dump(users, write_file)
    write_file.close()

#–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def currentMenu(id):
    with open("userList.json", "r") as read_file:
        users = json.load(read_file)
    read_file.close()
    data = list(filter(lambda user: user['id'] == id, users))
    return data[0]['menu']

def alarm():
    if time01 == "05:00:00":
        schedule.every().day.at("05:00").do(msg)    
        Thread(target=r_check_mes).start() 
    elif time01 == "07:00:00":
        schedul.every().day.at("07:00").do(msg)
        Thread(target=r_check_mes).start() 
    elif time01 == "09:00:00":
        schedule.every().day.at("09:00").do(msg)
        Thread(target=r_check_mes).start() 


if __name__ == "__main__": 
    # RUN
    bot.polling(none_stop=True)
